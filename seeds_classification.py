# -*- coding: utf-8 -*-
"""Seeds_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RuvE_TpsJCks0MHPhIbx_BWZqQiTATGI
"""

#importing required packages
import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import urllib
import warnings
warnings.filterwarnings("ignore")

"""**Loading of the data**"""

df = pd.read_csv("seeds_dataset.csv", header=None)
df.head()

df2 = pd.read_excel('Headings.xlsx', header = None)
df2

"""**Loading Header to the Dataset**"""

temp = []
for i in range(0, len(df2)):
  temp.append(df2[0][i])
print (temp)

df.columns = temp
df.head()

df.describe()

df.info()

"""**Preprocessing of the data**"""

#find the null values
df.isnull().sum()

#fill the missing values for numerical terms - mean
df['Compactness'] = df['Compactness'].fillna(df['Compactness'].mean())
df['Kernel_wid'] = df['Kernel_wid'].fillna(df['Kernel_wid'].mean())
df['Groove_len'] = df['Groove_len'].fillna(df['Groove_len'].mean())
df['Class'] = df['Class'].fillna(df['Class'].mean())

#find the null values
df.isnull().sum()

df

df['Class'].value_counts()

df['Class'] = df['Class'].fillna(0).astype(int)

df['Class'].value_counts()

df = df[df['Class']!=5]
df = df[df['Class']!=4]

df['Class'].value_counts()

len(df)

"""**Addition of Column**"""

seeds = []
for i in range(0,len(df)):
  if df.iloc[i]['Class']==1:
    seeds.append('Kama')
  elif df.iloc[i]['Class']==2:
    seeds.append('Rosa')
  elif df.iloc[i]['Class']==3:
    seeds.append('Canadian')

len(seeds)

df['Seeds'] = seeds

df

"""**Exploratory Data Analysis**"""

# Numerical Attributes Visualization
sns.distplot(df[' Area'])

sns.distplot(df['Perimeter'])

sns.distplot(df['Compactness'])

sns.distplot(df['Kernel_len'])

sns.distplot(df['Kernel_wid'])

sns.distplot(df['Asymmetry_coef'])

sns.distplot(df['Groove_len'])

#Pairplot used for better detailing
sns.pairplot(df.drop(['Class'], axis=1), hue='Seeds', height=2.5, markers=["8","s","D"])

"""**Correlation Matrix**"""

corr = df.corr()
plt.figure(figsize=(15,10))
sns.heatmap(corr, annot = True, cmap = "BuPu")

df.shape

df

"""**Train Test Split**"""

# specify input and output attributes
x = df.drop(['Seeds'], axis = 1)
y = df['Seeds']

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 0)

"""**Train the Model**"""

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(x_train, y_train)

KNeighborsClassifier(n_neighbors=5)

knn.score(x_train, y_train)

predictions = knn.predict(x_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_test, predictions)